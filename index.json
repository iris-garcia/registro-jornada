[
{
	"uri": "https://iris-garcia.github.io/workday/howto/gh-pages/",
	"title": "GitHub Pages",
	"tags": ["ci", "hugo", "doc"],
	"description": "",
	"content": " This document ilustrates how to setup GitHub Pages using Hugo as website generator and GitHub\u0026rsquo;s Actions to automate the deployment process.\nThere are different alternatives to setup GitHub pages, the one used in here is a project pages using gh-pages branch, the advantages are:\n It keeps your source and generated website in different branches and therefore maintains version control history for both. It uses the default Hugo\u0026rsquo;s public folder.  So basically this project\u0026rsquo;s repository has the following branches:\n master: Hosts the source code of the project under the docs/ folder. gh-pages: Hosts the static assets generated by hugo.  Step 1: Structure # Docs folder mkdir docs \u0026amp;\u0026amp; cd docs hugo new site . git add . git commit -m \u0026#34;Adds initial hugo site\u0026#34; git push origin master # gh-pages branch git checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \u0026#34;Initializing gh-pages branch\u0026#34; git push origin gh-pages Step 2: Generate a SSH key. ssh-keygen -t rsa -f hugo -q -N \u0026#34;\u0026#34; This will generate the files: hugo and hugo.pub which will be needed for the next steps.\n Step 3: Add a deployment key Navigate to your GitHub\u0026rsquo;s repository settings and under Deploy keys add a new one using the content of the hugo.pub SSH key generated in the previous step.\n  Make sure the Allow write access is checked, otherwise the GitHub\u0026rsquo;s Action won\u0026rsquo;t be able to push changes.\n Step 4: Create a secret Navigate to you GitHub\u0026rsquo;s repository settings and under Secrets add a new one using the content of the hugo SSH private key generated in the step 2.\n  Step 5: Add the GitHub\u0026rsquo;s Action. Create the needed directory in the hugo branch:\nmkdir -p .github/workflows Add a new file in the path .github/workflows/gh_pages.yml with the following content:\non:push:paths:-\u0026#39;docs/**\u0026#39;-\u0026#39;.github/workflows/hugo.yml\u0026#39;name:Hugojobs:build:runs-on:ubuntu-lateststeps:-uses:actions/checkout@v1-name:Installshugorun:| cd /tmpwgethttps://github.com/gohugoio/hugo/releases/download/v0.57.0/hugo_0.57.0_Linux-64bit.debsudodpkg-ihugo_0.57.0_Linux-64bit.debhugoversion-name:Buildhugositerun:| cd docsrm-rfpublicgitworktreeadd-bgh-pagespublicorigin/gh-pageshugo-name:Configuregitanddeploymentkeyenv:GITHUB_TOKEN:${{secrets.GITHUB_TOKEN}}GITHUB_DEPLOY_KEY:${{secrets.WORKDAY_GH}}run:| mkdir /home/runner/.sshssh-keyscan-trsagithub.com\u0026gt;/home/runner/.ssh/known_hostsecho\u0026#34;${GITHUB_DEPLOY_KEY}\u0026#34;\u0026gt;/home/runner/.ssh/id_rsa\u0026amp;\u0026amp;\\chmod400/home/runner/.ssh/id_rsagitremoteset-urlorigingit@github.com:iris-garcia/workday.gitgitconfig--globaluser.name\u0026#34;GitHub Action\u0026#34;gitconfig--globaluser.email\u0026#34;action@github.com\u0026#34;-name:Commitandpushchangestogh-pagesrun:| cd docs/publicgitadd.gitcommit-m\u0026#34;Publishing to gh-pages branch\u0026#34;gitpushorigingh-pages Replace the origin\u0026rsquo;s remote with your repository.\n Finally commit and push the changes (which should trigger already the Action).\ngit add .github/workflows/gh_pages.yml git commit -m \u0026#34;Adds GitHub\u0026#39;s Action to build hugo site.\u0026#34; git push origin master Step 5: Verify the Action If everything went well you should already have your site updated and a new commit to the gh-pages branch.\nYou can also see the output of the Action navigating to the Actions section of your repository.\n  "
},
{
	"uri": "https://iris-garcia.github.io/workday/dev/tools/",
	"title": "Toolchain",
	"tags": [],
	"description": "",
	"content": " Go The open source programming language Go will be used to develop the whole project, mainly because I want to try a new language and this one is becoming quite popular nowadays.\nGin Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance \u0026ndash; up to 40 times faster.\nIt is very well documented and provides many handy features like authentication, data validation and a configurable logger out of the box.\nMage Mage is a make/rake-like build tool using Go. You write plain-old go functions, and Mage automatically uses them as Makefile-like runnable targets.\nMage has no dependencies outside the Go standard library; in this project it is going to be used to automate every possible process like:\n mage test: runs the test suite. mage testverbose: runs the test suite with verbosity. mage testandcoverage: runs the test suite generating its code coverage. mage build: builds a binary of the project. mage install: installs the built binary under /usr/local/bin. mage start: Starts the HTTP Server using pm2 as process manager. mage startdev: Starts a dev environment, [WIP]. mage stop: Stops the HTTP Server using pm2 as process manager.  MariaDB The relational database engine MariaDB has been choosen to persist the data, it is OpenSource and fulfills the requirements.\nTest-driven development (TDD \u0026amp; BDD) Go has support for testing built in to its toolchain which will be used to cover unit and integration tests with the help of testify for the assertions.\nGinkgo will be used as a BDD testing framework and Gomega as a matcher library.\nOpenAPI This project will follow the OpenAPI Specification to document its API endpoints, probably using swagger to parse the specifications and generate a static site.\nPM2 As a process manager the tool PM2 is currently used, because it allows the usage with any language as long as it has a way to build/run it.\nIdeally this tool will be replace in favor of a Go tool, some of them has been already tested but none of them provide the same features as PM2.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/ci/travis/",
	"title": "Travis CI",
	"tags": ["ci"],
	"description": "",
	"content": " Description Travis is a hosted continuous integration service used to build and test software projects hosted at GitHub.\nIt provides a free plan for open source projects which is very convinient for our use case.\nThe whole configuration is set up in a single file .travis.yml which must be placed in the root directory of the project.\nConfiguration To avoid replicating exactly the same workflows in GitHub Actions and Travis, there are some little changes like testing two different Go versions: v1.13.x and master (which is the latest available at any given time).\nIt also releases artifacts when a new tag is pushed to the repository.\nlanguage:gogo:-1.13.x-masterdist:bionicsudo:requiredaddons:mariadb:\u0026#39;10.1\u0026#39;services:-mariadbbefore_install:-sudoapt-get-yinstallnpm-npminstallpm2@latest-ginstall:-gogetgithub.com/magefile/mage-magebuildbefore_script:-mysql-uroot-e\u0026#39;CREATE DATABASE workday;\u0026#39;-mysql-uroot-e\u0026#34;CREATE USER \u0026#39;workday\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;workday\u0026#39;;\u0026#34;-mysql-uroot-e\u0026#34;GRANT ALL ON workday.* TO \u0026#39;workday\u0026#39;@\u0026#39;%\u0026#39;; FLUSH PRIVILEGES;\u0026#34;script:-magestart-magetest-magestop The following lines tell travis to run the tests against two different versions of Go (1.13.x and master)\ngo:-1.13.x-master And the following excerpt defines bionic as the Ubuntu version to be used also tells the requirement of sudo needed to install npm and pm2.\ndist:bionicsudo:requiredaddons:mariadb:\u0026#39;10.1\u0026#39;services:-mariadb The addons and services sections are in place to boot a mariadb service which will be used for the integration tests against a test database.\nThe before_install and install configurations will fetch and setup all the prerequisites in order to run our build tool which is mage.\nFinally the script will use mage to start the environment, run the tests and stop it once it finishes.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/description/",
	"title": "Description",
	"tags": [],
	"description": "",
	"content": " Chapter 1  Description\nGet a general idea of what is Workday and the motivation to start its development.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/",
	"title": "Homepage",
	"tags": [],
	"description": "",
	"content": "Workday This site hosts the documentation of Workday.\n "
},
{
	"uri": "https://iris-garcia.github.io/workday/description/what/",
	"title": "What is Workday?",
	"tags": [],
	"description": "",
	"content": "Workday is a RESTful API project that allows the management of workers\u0026rsquo; day registration, for this purpose it makes use of a relational database where such data persists.\nIt allows the creation of different types of users (roles), initially there are two main roles:\n employee: The employee has permissions to:  Register checks in and checks out. Update their own password. Update their own schedule.  HR: The Human Resources role is the one with almost full control, it has the permissions of a regular employee plus:  Retrieve every employee\u0026rsquo;s schedule. Register employees. Remove employees. Reset employees\u0026rsquo; password.   The final goal is to build clients consuming this API to improve the user experience, for example:\nAn Android/iOS app which automatically registers the checks in when the GPS location is near the Office\u0026rsquo;s location and the checks out when it gets away from the Office\u0026rsquo;s location.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/description/why/",
	"title": "Why?",
	"tags": [],
	"description": "",
	"content": "Since last May 12, 2019 every Spanish company is required to provide their employees a process to record their working hours.\nThis process can be as simple as signing in a paper the checks in and checks out for every single workday; but any other process can be used and this is the reason for which I decided to develop this project.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/ci/github/",
	"title": "GitHub Actions",
	"tags": ["ci"],
	"description": "",
	"content": " Description GitHub Actions is the new continuous integration and deployment system built and maintained by the community.\nConfiguration Currently there are two workflows configured:\nTest with verbosity enabled To make it a bit different that the pipeline configured in Travis CI, this one will run the tests with verbosity enabled, this way it outputs every spec and API call done for each test case.\nAn example of one run can be seen here.\non:pushname:Unittestsjobs:checks:name:runruns-on:ubuntu-lateststeps:-uses:actions/checkout@master-name:runuses:cedrickring/golang-action@1.4.1env:GO111MODULE:\u0026#34;on\u0026#34;with:args:| go get github.com/magefile/mage \u0026amp;\u0026amp; \\gogetgithub.com/onsi/ginkgo/ginkgo\u0026amp;\u0026amp;\\magebuild\u0026amp;\u0026amp;\\magetestverbose There is just one job configured in this Action with the name checks and as stated in the line 8 of the configuration it uses Ubuntu in it latest available version.\nThere are two steps in this job:\nThe first one Checks out the project repository in its master branch.\nThe second one uses an action to automatically setup a Go workspace and run arbitrary commands, the documentation can be seen here. If no args are specified and a Makefile is detected, this action will run make. Otherwise go test and go build will be run.\nIn this case it is overwritten in order to install mage and ginkgo CLIs to allow the build and run of the tests.\nHugo documentation site This workflow is not really a typical continuous integration one, but I think it makes sense to mention it here as it is taking care of automatically update the documentation site.\non:push:paths:-\u0026#39;docs/**\u0026#39;-\u0026#39;.github/workflows/hugo.yml\u0026#39;name:Hugojobs:build:runs-on:ubuntu-lateststeps:-uses:actions/checkout@v1-name:Installshugorun:| cd /tmpwgethttps://github.com/gohugoio/hugo/releases/download/v0.57.0/hugo_0.57.0_Linux-64bit.debsudodpkg-ihugo_0.57.0_Linux-64bit.debhugoversion-name:Buildhugositerun:| cd docsrm-rfpublicgitworktreeadd-bgh-pagespublicorigin/gh-pageshugo-name:Configuregitanddeploymentkeyenv:GITHUB_TOKEN:${{secrets.GITHUB_TOKEN}}GITHUB_DEPLOY_KEY:${{secrets.WORKDAY_GH}}run:| mkdir /home/runner/.sshssh-keyscan-trsagithub.com\u0026gt;/home/runner/.ssh/known_hostsecho\u0026#34;${GITHUB_DEPLOY_KEY}\u0026#34;\u0026gt;/home/runner/.ssh/id_rsa\u0026amp;\u0026amp;\\chmod400/home/runner/.ssh/id_rsagitremoteset-urlorigingit@github.com:iris-garcia/workday.gitgitconfig--globaluser.name\u0026#34;GitHub Action\u0026#34;gitconfig--globaluser.email\u0026#34;action@github.com\u0026#34;-name:Commitandpushchangestogh-pagesrun:| cd docs/publicgitadd.gitcommit-m\u0026#34;Publishing to gh-pages branch\u0026#34;gitpushorigingh-pages To get this one working there are some requisites explained in a howto document.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/dev/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " Chapter 2  Development\nThis chapter shows which tools are used in the development of the project and how to set up a working dev environment.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/dev/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " Go  Version used: 1.13.1 Setup: Most of the linux distributions provide a package to install Go, but it is also possible to download its binary.\nwget https://dl.google.com/go/go1.13.3.src.tar.gz tar -C /usr/local -xzf go1.13.3.src.tar.gz export PATH=$PATH:/usr/local/go/bin  Mage  Setup: Once go is installed, we can install mage as follows\ngo get github.com/magefile/mage  MariaDB  Version used: 10.4 Setup: Most of the linux distrubutions provide a package to install MariaDB, but if docker is installed the following command will spawn a MariaDB container:\nmage startdev  Nodejs (Production)  Version used: 12.11.1 Nodejs is only needed to install PM2 and therefore it is not a requirement, however the current state of the project uses it to run the service in a production environment.  "
},
{
	"uri": "https://iris-garcia.github.io/workday/dev/api/",
	"title": "API Test Class",
	"tags": ["bdd", "test"],
	"description": "",
	"content": " User story As an admin employee, I want to be able to:\n Add new employees to the system. Edit already existing employees\u0026rsquo; details. List all the employees existing in the system. Retrieve the details of any employee given its ID. Delete an employee from the system given its ID.  Endpoints    Method Endpoint     GET /status   GET /employees   POST /employees   GET /employees/{id}   PUT /employees/{id}   DELETE /employees/{id}     GET /status: Returns a 200 and {\u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot;} in the body. GET /employees: Returns a 200 and the list of employees stored in the database. POST /employees: Adds a new employee into the database if the body fulfills the requirements (firstname, lastname, role, password), otherwise it returns a 204 reponse. GET /employees/{id}: Returns a 200 and the details of an employee if the id is found otherwise a 404. DELETE /employees/{id}: Returns a 200 and an OK message if the employee with {id} is found otherwise a 500 and the error. PUT /employees/{id}: Returns a 200 and an OK message if the employee with {id} is found, if it is not found a 404 and if any other error happens a 500 with the error message.  BDD has been used to test every possible use case to reach a 100% code coverage it is worth to mention that the database has been mocked so the current tests are Unit tests, leaving the Integration tests for a later iteration.\nSource code The code which covers the current class can be found here.\nDemo   "
},
{
	"uri": "https://iris-garcia.github.io/workday/ci/",
	"title": "Continuous Integration",
	"tags": [],
	"description": "",
	"content": " Chapter 3  Continuous Integration\nThis chapter describes the systems used to continuously integrate changes into the project.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/deployment/",
	"title": "Deployment",
	"tags": [],
	"description": "",
	"content": " Chapter 4  Deployment\nThis chapter describes where and how is this project deployed.\nWork in progress\u0026hellip;\n "
},
{
	"uri": "https://iris-garcia.github.io/workday/howto/",
	"title": "How-to",
	"tags": [],
	"description": "",
	"content": " Chapter 5  How to\u0026rsquo;s\nThis chapter hosts all the step by step guides which I find useful to share.\n"
},
{
	"uri": "https://iris-garcia.github.io/workday/tags/bdd/",
	"title": "bdd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://iris-garcia.github.io/workday/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://iris-garcia.github.io/workday/tags/test/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://iris-garcia.github.io/workday/tags/ci/",
	"title": "ci",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://iris-garcia.github.io/workday/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]