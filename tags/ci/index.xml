<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ci on Workday</title>
    <link>https://iris-garcia.github.io/workday/tags/ci/</link>
    <description>Recent content in ci on Workday</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>iris.garcia.desebastian@gmail.com (Iris Garcia)</managingEditor>
    <webMaster>iris.garcia.desebastian@gmail.com (Iris Garcia)</webMaster>
    <lastBuildDate>Mon, 09 Dec 2019 18:37:03 +0100</lastBuildDate>
    
	<atom:link href="https://iris-garcia.github.io/workday/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Travis CI</title>
      <link>https://iris-garcia.github.io/workday/ci/travis/</link>
      <pubDate>Mon, 09 Dec 2019 18:37:03 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/ci/travis/</guid>
      <description>Description Travis is a hosted continuous integration service used to build and test software projects hosted at GitHub.
It provides a free plan for open source projects which is very convinient for our use case.
The whole configuration is set up in a single file .travis.yml which must be placed in the root directory of the project.
Configuration To avoid replicating exactly the same workflows in GitHub Actions and Travis, there are some little changes like testing two different Go versions: v1.</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://iris-garcia.github.io/workday/ci/github/</link>
      <pubDate>Mon, 09 Dec 2019 18:37:03 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/ci/github/</guid>
      <description>Description GitHub Actions is the new continuous integration and deployment system built and maintained by the community.
Configuration Currently there are two workflows configured:
Test with verbosity enabled To make it a bit different that the pipeline configured in Travis CI, this one will run the tests with verbosity enabled, this way it outputs every spec and API call done for each test case.
An example of one run can be seen here.</description>
    </item>
    
  </channel>
</rss>