<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage on Workday</title>
    <link>https://iris-garcia.github.io/workday/</link>
    <description>Recent content in Homepage on Workday</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>iris.garcia.desebastian@gmail.com (Iris Garcia)</managingEditor>
    <webMaster>iris.garcia.desebastian@gmail.com (Iris Garcia)</webMaster>
    <lastBuildDate>Fri, 06 Dec 2019 18:24:50 +0100</lastBuildDate>
    
	<atom:link href="https://iris-garcia.github.io/workday/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerfile</title>
      <link>https://iris-garcia.github.io/workday/docker/dockerfile/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:52 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/docker/dockerfile/</guid>
      <description>To create a Docker image, we have added two new files to our project:
 Dockerfile: Contains the needed commands to create the image. .dockerignore: It works like .gitignore for git, it allows to define which file/s should not be included in the Docker image when the command ADD or COPY is/are invoked.   # Use a golang image as base builder imageFROMgolang:1.13 as builder# Create the project&amp;#39;s directory under the default GOPATHRUN mkdir -p /go/src/github.</description>
    </item>
    
    <item>
      <title>OpenShift</title>
      <link>https://iris-garcia.github.io/workday/deployment/openshit/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:52 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/deployment/openshit/</guid>
      <description>Requirements Create account in RedHat  Create a new account using the Sign up form. Sign in into OpenShift.  Install the OpenShift client wget https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.1/linux/oc.tar.gz tar xvzf oc.tar.gz sudo cp oc /usr/local/bin/ The binary can be copied to any place as long as it is included in the $PATH.
 Get the Login command   Create a Dockerfile OpenShift can create a docker image given a source git repository, but it needs a Dockerfile definition which is shown here.</description>
    </item>
    
    <item>
      <title>Toolchain</title>
      <link>https://iris-garcia.github.io/workday/dev/tools/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:51 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/dev/tools/</guid>
      <description>Go The open source programming language Go will be used to develop the whole project, mainly because I want to try a new language and this one is becoming quite popular nowadays.
Gin Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance &amp;ndash; up to 40 times faster.
It is very well documented and provides many handy features like authentication, data validation and a configurable logger out of the box.</description>
    </item>
    
    <item>
      <title>Travis CI</title>
      <link>https://iris-garcia.github.io/workday/ci/travis/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:51 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/ci/travis/</guid>
      <description>Description Travis is a hosted continuous integration service used to build and test software projects hosted at GitHub.
It provides a free plan for open source projects which is very convinient for our use case.
The whole configuration is set up in a single file .travis.yml which must be placed in the root directory of the project.
Configuration To avoid replicating exactly the same workflows in GitHub Actions and Travis, there are some little changes like testing two different Go versions: v1.</description>
    </item>
    
    <item>
      <title>What is Workday?</title>
      <link>https://iris-garcia.github.io/workday/description/what/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:50 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/description/what/</guid>
      <description>Workday is a RESTful API project that allows the management of workers&amp;rsquo; day registration, for this purpose it makes use of a relational database where such data persists.
It allows the creation of different types of users (roles), initially there are two main roles:
 employee: The employee has permissions to:  Register checks in and checks out. Update their own password. Update their own schedule.  HR: The Human Resources role is the one with almost full control, it has the permissions of a regular employee plus:  Retrieve every employee&amp;rsquo;s schedule.</description>
    </item>
    
    <item>
      <title>Why?</title>
      <link>https://iris-garcia.github.io/workday/description/why/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:50 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/description/why/</guid>
      <description>Since last May 12, 2019 every Spanish company is required to provide their employees a process to record their working hours.
This process can be as simple as signing in a paper the checks in and checks out for every single workday; but any other process can be used and this is the reason for which I decided to develop this project.</description>
    </item>
    
    <item>
      <title>Building the Docker image</title>
      <link>https://iris-garcia.github.io/workday/docker/build/</link>
      <pubDate>Fri, 06 Dec 2019 18:28:28 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/docker/build/</guid>
      <description>To build the Docker image locally we can run the following command from the root directory of the project:
$ docker build . -t workday Sending build context to Docker daemon 118.8kB Step 1/11 : FROM golang:1.13 as builder ---&amp;gt; a2e245db8bd3 Step 2/11 : RUN mkdir -p /go/src/github.com/iris-garcia/workday ---&amp;gt; Running in 61717fb25087 Removing intermediate container 61717fb25087 ---&amp;gt; eaf6e4d73eb4 Step 3/11 : WORKDIR /go/src/github.com/iris-garcia/workday ---&amp;gt; Running in 41ddb2a701bd Removing intermediate container 41ddb2a701bd ---&amp;gt; d5b6af426ca6 Step 4/11 : COPY .</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://iris-garcia.github.io/workday/ci/github/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:51 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/ci/github/</guid>
      <description>Description GitHub Actions is the new continuous integration and deployment system built and maintained by the community.
Configuration Currently there are two workflows configured:
Test with verbosity enabled To make it a bit different that the pipeline configured in Travis CI, this one will run the tests with verbosity enabled, this way it outputs every spec and API call done for each test case.
An example of one run can be seen here.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://iris-garcia.github.io/workday/dev/requirements/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:51 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/dev/requirements/</guid>
      <description>Go  Version used: 1.13.1 Setup: Most of the linux distributions provide a package to install Go, but it is also possible to download its binary.
wget https://dl.google.com/go/go1.13.3.src.tar.gz tar -C /usr/local -xzf go1.13.3.src.tar.gz export PATH=$PATH:/usr/local/go/bin  Mage  Setup: Once go is installed, we can install mage as follows
go get github.com/magefile/mage  MariaDB  Version used: 10.4 Setup: Most of the linux distrubutions provide a package to install MariaDB, but if docker is installed the following command will spawn a MariaDB container:</description>
    </item>
    
    <item>
      <title>Docker Hub</title>
      <link>https://iris-garcia.github.io/workday/docker/dockerhub/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:52 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/docker/dockerhub/</guid>
      <description>Now that we have a working Docker image we want to automate the building process, so it automatically builds and publishes the image with every new code change.
Step 1: Register in Docker Hub Just click in Sing up and fill up the following form:
  Step 2: Create a new Repository Click in Create Repository + and name it accordingly, under the Build Settings section select the Connected option with a GitHub logo to autobuild a new image with every git push event as long as it matches the build rules, which in our case are the default ones (the Dockerfile is located in the root directory of the project).</description>
    </item>
    
    <item>
      <title>API Test Class</title>
      <link>https://iris-garcia.github.io/workday/dev/api/</link>
      <pubDate>Fri, 06 Dec 2019 18:24:51 +0100</pubDate>
      <author>iris.garcia.desebastian@gmail.com (Iris Garcia)</author>
      <guid>https://iris-garcia.github.io/workday/dev/api/</guid>
      <description>User story As an admin employee, I want to be able to:
 Add new employees to the system. Edit already existing employees&amp;rsquo; details. List all the employees existing in the system. Retrieve the details of any employee given its ID. Delete an employee from the system given its ID.  Endpoints    Method Endpoint     GET /status   GET /employees   POST /employees   GET /employees/{id}   PUT /employees/{id}   DELETE /employees/{id}     GET /status: Returns a 200 and {&amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;} in the body.</description>
    </item>
    
  </channel>
</rss>